// import test from 'ava';
test = require('ava')


var interpreter = null
var pyjs = null
var main_scope = null

// This runs before all tests
test.before(async function (t) {
    var createModule = require('./pyjs_runtime_node.js')
    pyjs = await createModule()
    global.Module = pyjs
    await import('./python_data.js');
    await pyjs.init()
    return pyjs
});

test.after.always('guaranteed cleanup', t => {
    pyjs.cleanup()
});


test.beforeEach(t => {
    // This runs before each test
    main_scope = pyjs.main_scope()
});

test.afterEach(t => {
    // This runs after each test
    main_scope.delete()
});


test.serial('test-basics',async function (t) {

    pyjs.exec("import numpy\nimport pyjs", main_scope)
    var s0 = pyjs.eval("numpy.ones([640, 480]).shape[0]", main_scope)
    t.is(s0,640)
    s1 = pyjs.eval("numpy.ones([640, 480]).shape[1]", main_scope)
    t.is(s1,480)
});


test.serial('test-exceptions',async function (t) {
    var err = false;
    try{
        pyjs.exec("raise RuntimeError(\"this is intended\")", main_scope)
    }
    catch(e)
    {
        err = true
        t.is(e.message.startsWith("RuntimeError: this is intended"),true)
    }
    t.is(err, true)
});



test.serial('test-getattr',async function (t) {

    pyjs.exec("import numpy\nimport pyjs", main_scope)
    var arr = pyjs.eval("numpy.ones([640, 480])", main_scope)
    var shape = arr.shape
    t.is(shape !== undefined, true)
    shape.delete()
    arr.delete()

});


test.serial('test-call',async function (t) {
    var square = pyjs.eval("lambda a : a * a", main_scope)
    res = square.py_call(10)
    t.is(res,100)
});





test.serial('test-call-with-py-objects',async function (t) {
    pyjs.exec(`def mysum(l):
        if not isinstance(l, list):
            raise RuntimeError(f'{l} is not list')
        return sum(l)
    `, main_scope)
    var list = pyjs.eval("[1,2,3]", main_scope)
    var mysum = pyjs.eval("mysum", main_scope)

    res = mysum.py_call(list)
    list.delete()
    mysum.delete()
    t.is(res, 6)
});


test.serial('test-call-with-kwargs',async function (t) {
    pyjs.exec(`def myfunc(arg0, arg1, arg2, arg3):
        assert arg0==10
        assert arg1==2
        assert arg2==3
        assert arg3=='four'
        return arg0 + arg1 + arg2
    `, main_scope)
    var myfunc = pyjs.eval("myfunc", main_scope)

    var args = [10,2]
    var kwargs = {"arg2":3,"arg3":"four"}

    res = myfunc.py_apply(args, kwargs)

    myfunc.delete()
    t.is(res, 15)
});



test.serial('test-getitem',async function (t) {

    pyjs.exec("import numpy\nimport pyjs", main_scope)
    var arr = pyjs.eval("numpy.ones([64, 48])", main_scope)
    var shape = arr.shape
    var s0 = shape.get(0)
    t.is(s0,64)
    var s1 = shape.get(1)
    t.is(s1,48)
    shape.delete()
    arr.delete()
});


test.serial('test-getitem-multi-key',async function (t) {

    var py_code = `
import numpy
class Foo(object):
    def __init__(self):
        self.a = numpy.identity(3)
    def __getitem__(self, key):
        return int(self.a[key])
`
    ;


    pyjs.exec(py_code, main_scope)
    var foo = pyjs.eval("Foo()", main_scope)
    t.is(foo.get(0,1),0)
    t.is(foo.get(1,0),0)
    t.is(foo.get(0,0),1)
    t.is(foo.get(1,1),1)
    foo.delete()
});


test.serial('test-main-scope',async function (t) {

    var py_code = `
assert pyjs is not None
assert asyncio is not None
    `;
    pyjs.exec(py_code, main_scope)

    t.pass()
});



test.serial('test-async',async function (t) {

    var py_code = `
async def muladd_inner(*args):
    return args[0]*args[1] + args[2]

async def muladd(a, b, c):
    await asyncio.sleep(0.1)
    return await muladd_inner(a,b,c)
    `;



    pyjs.exec(py_code, main_scope)
    var muladd = pyjs.eval("muladd", main_scope)

    var r42 = await muladd.py_call_async(4,10,2)
    t.is(r42, 42)

    var p43 = muladd.py_apply_async([4,10], {c:3})
    t.is(await p43, 43)


});


test.serial('test-async-errors',async function (t) {

    var py_code = `
async def muladd_inner(*args):
    return args[0]*args[1] + args[2] + c

async def muladd(a, b, c):
    await asyncio.sleep(0.1)
    return await muladd_inner(a,b,c)
    `;

    pyjs.exec(py_code, main_scope)
    var muladd = pyjs.eval("muladd", main_scope)

    var err = false
    try{
        await muladd.py_call_async(4,10,2)
    }
    catch(e){
        err = true
        t.is(e,  'NameError("name \'c\' is not defined")')
    }
    t.is(err, true)


});




test.serial('test-numpy-to-typed-array',async function (t) {



    pyjs.exec(`
import numpy
arr = numpy.arange(5)
print(arr.dtype)
typed_array = pyjs.buffer_to_js_typed_array(arr)

    `, main_scope)

    var typed_array = pyjs.eval("typed_array", main_scope);

    t.is(typed_array.constructor.name, "Int32Array");

    var shouldArray = new Int32Array([0,1,2,3,4]);

    t.deepEqual(typed_array, shouldArray);
});



test.serial('test-numpy-to-typed-array-types',async function (t) {

    type_mapping = {
        "uint8":  "Uint8Array",
        "uint16": "Uint16Array",
        "uint32": "Uint32Array",
        // "uint64": "BigUint64Array",
        "int8":   "Int8Array",
        "int16":  "Int16Array",
        "int32":  "Int32Array",
        // "int64":  "BigInt64Array",
        "float32": "Float32Array",
        "float64": "Float64Array"
    }

    for (const [np_dtype, js_cls] of Object.entries(type_mapping)) {

        pyjs.exec(`
import numpy
arr = numpy.arange(5, dtype='${np_dtype}')
typed_array = pyjs.buffer_to_js_typed_array(arr)

        `, main_scope)

        var typed_array = pyjs.eval("typed_array", main_scope);

        t.is(typed_array.constructor.name, js_cls);


    }
});
