// import test from 'ava';
test = require('ava')


var interpreter = null
var pyjs = null
var main_scope = null

// This runs before all tests
test.before(async function (t) {
    var createModule = require('./pyjs_runtime_node.js')
    pyjs = await createModule()
    global.Module = pyjs
    await import('./python_data.js');
    await pyjs.init()
    interpreter =  new pyjs.Interpreter()
    return pyjs
});

test.after.always('guaranteed cleanup', t => {
    // This will always run, regardless of earlier failures
    interpreter.delete()
});


test.beforeEach(t => {
    // This runs before each test
    main_scope = pyjs.main_scope()
});

test.afterEach(t => {
    // This runs after each test
    main_scope.delete()
});


test.serial('test-basics',async function (t) {

    interpreter.exec("import numpy\nimport pyjs", main_scope)
    var s0 = interpreter.eval("numpy.ones([640, 480]).shape[0]", main_scope)
    t.is(s0,640)
    s1 = interpreter.eval("numpy.ones([640, 480]).shape[1]", main_scope)
    t.is(s1,480)
});


test.serial('test-exceptions',async function (t) {
    var err = false;
    try{
        interpreter.exec("raise RuntimeError(\"this is intended\")", main_scope)
    }
    catch(e)
    {
        err = true
        t.is(e.message.startsWith("RuntimeError: this is intended"),true)
    }
    t.is(err, true)
});



test.serial('test-getattr',async function (t) {

    interpreter.exec("import numpy\nimport pyjs", main_scope)
    var arr = interpreter.eval("numpy.ones([640, 480])", main_scope)
    var shape = arr.shape
    t.is(shape !== undefined, true)
    shape.delete()
    arr.delete()

});


test.serial('test-call',async function (t) {
    var square = interpreter.eval("lambda a : a * a", main_scope)
    res = square.py_call(10)
    t.is(res,100)
});





test.serial('test-call-with-py-objects',async function (t) {
    interpreter.exec("def mysum(l):                 \n\
        if not isinstance(l, list):                 \n\
            raise RuntimeError(f'{l} is not list')  \n\
        return sum(l)                               \n\
    ", main_scope)
    var list = interpreter.eval("[1,2,3]", main_scope)
    var mysum = interpreter.eval("mysum", main_scope)

    res = mysum.py_call(list)
    list.delete()
    mysum.delete()
    t.is(res, 6)
});


test.serial('test-call-with-kwargs',async function (t) {
    interpreter.exec("def myfunc(arg0, arg1, arg2, arg3): \n\
        assert arg0==10                                   \n\
        assert arg1==2                                    \n\
        assert arg2==3                                    \n\
        assert arg3=='four'                               \n\
        return arg0 + arg1 + arg2                         \n\
    ", main_scope)
    var myfunc = interpreter.eval("myfunc", main_scope)

    var args = [10,2]
    var kwargs = {"arg2":3,"arg3":"four"}

    res = myfunc.py_apply(args, kwargs)

    myfunc.delete()
    t.is(res, 15)
});



test.serial('test-getitem',async function (t) {

    interpreter.exec("import numpy\nimport pyjs", main_scope)
    var arr = interpreter.eval("numpy.ones([64, 48])", main_scope)
    var shape = arr.shape
    var s0 = shape.py_getitem(0)
    t.is(s0,64)
    var s1 = shape.py_getitem(1)
    t.is(s1,48)
    shape.delete()
    arr.delete()
});


test.serial('test-getitem-multi-key',async function (t) {

var py_code = '                     \n\
import numpy                        \n\
class Foo(object):                  \n\
    def __init__(self):             \n\
        self.a = numpy.identity(3)  \n\
    def __getitem__(self, key):     \n\
        return int(self.a[key])     \n\
'
;


    interpreter.exec(py_code, main_scope)
    var foo = interpreter.eval("Foo()", main_scope)
    t.is(foo.py_getitem(0,1),0)
    t.is(foo.py_getitem(1,0),0)
    t.is(foo.py_getitem(0,0),1)
    t.is(foo.py_getitem(1,1),1)
    foo.delete()
});




// test.serial('test-async-exec',async function (t) {

// var py_code = '                     \n\
// import numpy                        \n\
// class Foo(object):                  \n\
//     def __init__(self):             \n\
//         self.a = numpy.identity(3)  \n\
//     def __getitem__(self, key):     \n\
//         return int(self.a[key])     \n\
// ';


//     p = interpreter.async_exec(py_code, main_scope)
//     await p
//     try{
//         var foo = await  interpreter.async_eval("Foo()", main_scope)
//     }
//     catch(err){
//         t.fail(JSON.stringify(err))
//     };
//     // t.is(foo.py_getitem(0,1),0)
//     // t.is(foo.py_getitem(1,0),0)
//     // t.is(foo.py_getitem(0,0),1)
//     // t.is(foo.py_getitem(1,1),1)
//     // foo.delete()
//     t.pass()
// });
